import cv2
import numpy as np
from matplotlib import pyplot as plt
import os
from scipy import misc

import SudokuProcessingFunctions as spf

from PIL import Image

# vectorize sharpen and normalization functions
v_sharpen_image = np.vectorize(spf.sharpen_image)
v_normalize_image = np.vectorize(spf.normalize_image)


#output_file = open('training_data.txt', 'w')

for fname in ['test3.png']:#os.listdir('./sudokus'):

    print 'working with file : ' , fname


    #img = cv2.imread('./sudokus/'+fname,0)
    #img = cv2.imread(fname,0)

    img = Image.open(fname).convert('L')
    img = np.array(img)
    
    spf.sharpen_image2(img)

    # plt.ion()
    # plt.figure()
    # plt.imshow(img, cmap = 'gray')
    # number = raw_input("what number is this?")
    # plt.close()    





    
    
    # A = np.linspace(0,img.shape[0], num = 10)
    # B = np.linspace(0,img.shape[1], num = 10)
    
    # print A, B
    
    # for i in range(len(A)-1):
    #     for j in range(len(B)-1):
            
    #         window = img[A[i]:A[i+1], B[j]:B[j+1]]
            
    #         # for each slice find white
    #         white = img[A[i]:A[i+1], B[j]:B[j+1]].max()*.80
            
    #         for ii in range(window.shape[0]):
    #             for jj in range(window.shape[1]):
                    
    #                 if window[ii,jj] >= white: 
    #                     window[ii,jj] = 255
    #                 else:
    #                     window[ii,jj] = 0




    # # turn image to black and white and trim the outer edges
    # sharp_img = v_sharpen_image(img, img.max())

    # img = v_sharpen_image(img, img.max())
    # spf.edge_info(sharp_img)
    # sharp_img = spf.trim_outer_edge(sharp_img)
    


    # # plot the sharp image
    # plt.ion()
    # plt.figure()
    # plt.imshow(img, cmap = 'gray')
    # number = raw_input("what number is this?")
    # plt.close()  

    
    # # compute the indeces of the vertical and horizontal grid
    # # cols = spf.col_indeces(sharp_img)
    # # rows = spf.row_indeces(sharp_img)
    
    # cols = spf.col_indeces(img)
    # rows = spf.row_indeces(img)
    
    # corners, diffs = spf.edge_info(img)
    # left_diff = diffs[0]
    # top_diff = diffs[1]
    # right_diff = diffs[2]
    # bot_diff = diffs[3]
    
    # print corners
    # print diffs
    # print ''
    # print cols
    # print rows
    
    
    
    # for col in range(9):
    #     for row in range(9):
    #         plt.ion()
    #         plt.figure()
    #         plt.imshow(img[rows[row]:rows[row+1], cols[col]:cols[col+1]], cmap = 'gray')
    #         number = raw_input("what number is this?")
    #         plt.close()    
            
    #         h_slope = int((top_diff*(8-row) + bot_diff*(row))/8.)
    #         v_slope = int((left_diff*(8-col) + right_diff*(col))/8.)
            
    #         top_row = rows[row] + (h_slope*col)/10
    #         bot_row = rows[row+1] + (h_slope*(col+1))/10

    #         left_col = cols[col] + (v_slope*row)/10
    #         right_col = cols[col+1] + (v_slope*(row+1))/10

    #         plt.ion()
    #         plt.figure()
    #         plt.imshow(img[top_row:bot_row, left_col:right_col], cmap = 'gray')
    #         number = raw_input("better?")
    #         plt.close()    

    
    # for col in range(9):
    #     for row in range(9):
            
    #         window = spf.get_cell(sharp_img[rows[row]:rows[row+1], 
    #                                         cols[col]:cols[col+1] ])
    #         plt.ion()
    #         plt.figure()
    #         plt.imshow(sharp_img[rows[row]:rows[row+1], 
    #                              cols[col]:cols[col+1] ], 
    #                    cmap = 'gray')
    #         number = raw_input("what number is this?")
    #         plt.close()

            # if window != None:
            #     plt.ion()
            #     plt.figure()
            #     plt.imshow(window, cmap = 'gray')
            #     number = raw_input("what number is this?")
            #     plt.close()

                
#                 #resize the image and write to file as training data
#                 window = misc.imresize(window, (8,8)).flatten()
#                 window = v_normalize_image(window)
#                 # for w in window:
#                 #     output_file.write(str(int(w)) + ' , ')
#                 # output_file.write(str(int(number)) + '\n')


# #output_file.close()
